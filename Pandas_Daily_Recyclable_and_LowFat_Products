This is the second question of the Pandas 30 Days

Question:

Description:
Table: Products

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| product_id  | int     |
| low_fats    | enum    |
| recyclable  | enum    |
+-------------+---------+
product_id is the primary key (column with unique values) for this table.
low_fats is an ENUM (category) of type ('Y', 'N') where 'Y' means this product is low fat and 'N' means it is not.
recyclable is an ENUM (category) of types ('Y', 'N') where 'Y' means this product is recyclable and 'N' means it is not.
 

Write a solution to find the ids of products that are both low fat and recyclable.

Return the result table in any order.

The result format is in the following example.

Example 1:

Input: 
Products table:
+-------------+----------+------------+
| product_id  | low_fats | recyclable |
+-------------+----------+------------+
| 0           | Y        | N          |
| 1           | Y        | Y          |
| 2           | N        | Y          |
| 3           | Y        | Y          |
| 4           | N        | N          |
+-------------+----------+------------+
Output: 
+-------------+
| product_id  |
+-------------+
| 1           |
| 3           |
+-------------+
Explanation: Only products 1 and 3 are both low fat and recyclable.

My solution:

import pandas as pd

def find_products(products: pd.DataFrame) -> pd.DataFrame:
    new_prod = products[(products["low_fats"]== 'Y') & (products['recyclable']=="Y")]
    return new_prod[["product_id"]]

Explanation:
pandas
Approach: Selecting rows based on conditions
Algorithm
We have the original DataFrame products shown below:

product_id	low_fats	recyclable
0	Y	N
1	Y	Y
2	N	Y
3	Y	Y
4	N	N

In Pandas, boolean indexing allows us to filter the DataFrame by using boolean arrays or conditions. It means that we can use a Series of boolean values or create conditions that evaluate to True or False for each row in the DataFrame. By applying these boolean values or conditions as an index to the DataFrame, we can selectively extract the rows that satisfy the conditions.

In this scenario, we should select only the rows where the low_fats column has a value of "Y" (indicating the product is low fat) and the recyclable column has a value of "Y" (indicating the product is recyclable), which can be represented as:

df = products[(products['low_fats'] == 'Y') & (products['recyclable'] == 'Y')]
This filtering creates a new DataFrame df containing the products that meet both criteria. Note that the rows with product_id equal to 0, 2, and 4 are filtered out.

product_id	low_fats	recyclable
1	Y	Y
3	Y	Y

Next, we need to select only the desired column product_id from df using double square brackets.

df = df[['product_id']]
The resulting DataFrame looks like this:

product_id
1
3

